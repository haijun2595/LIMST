# Activate the environment
conda activate scanpy_env
# Enter the Python environment
python
# Load packages and read data
import scanpy as sc
import os
import math
import itertools
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set the path for the H5AD files
h5ad_file_paths = [
    'path/CD4_cells_selected_samplegroup_clusters.h5ad',
    'path/CD8_cells_selected_samplegroup_clusters.h5ad',
    'path/DNT1_cells_selected_samplegroup_clusters.h5ad'
]

# Read the H5AD files and store them in a list
adata_list = [sc.read_h5ad(file_path) for file_path in h5ad_file_paths]
# Merge the data
adata = adata_list[0].concatenate(adata_list[1:], batch_key="batch")

# Check if the 'leiden_renamed' column exists in adata.obs
if 'leiden_renamed' not in adata.obs:
    raise ValueError("'leiden_renamed' column is not found in adata.obs")

# Names of the subgroups to extract from 'leiden_renamed'
subgroups = [
    "c1_DNT_GZMK", "c7_DNT_GNLY", "c4_DNT_FOXP3", "CD4_c4_CTL", "CD4_c0_Treg_TIGIT",
    "CD4_c5_Treg_APOE", "CD4_c7_Treg_MKI67", "CD8_c0_TEFF_DUSP2", "CD8_c5_TEFF_FCGR3A",
    "CD8_c8_TEFF_CD74", "CD8_c2_TEX", "CD8_c4_TEX_APOE"
]

# Extract the specified subgroups from 'leiden_renamed'
adata_subgroups = adata[adata.obs['leiden_renamed'].isin(subgroups)]

# Create a new column 'cell_type' if it doesn't exist
if 'cell_type' not in adata_subgroups.obs.columns:
    adata_subgroups.obs['cell_type'] = adata_subgroups.obs['leiden_renamed']

# Group by 'cell_type' and calculate the average gene expression for each cell cluster
grouped = adata_subgroups.to_df().groupby(adata_subgroups.obs['cell_type']).mean()

# Reset index to make 'cell_type' a column in the DataFrame
grouped_reset = grouped.reset_index()

# Transpose the DataFrame
grouped_transposed = grouped_reset.T

# The first row is 'cell_type', set it as new column names
new_header = grouped_transposed.iloc[0]
grouped_transposed = grouped_transposed[1:]
grouped_transposed.columns = new_header

# Calculate the correlation matrix
corr_matrix = grouped_transposed.corr(method='spearman')
mask = np.tril(np.ones_like(corr_matrix, dtype=bool))

# Plot the heatmap
plt.figure(figsize=(30, 20))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True, mask=~mask, annot_kws={"size": 10}, fmt='.2f')
plt.title('Spearman Correlation Heatmap of Leiden Renamed Clusters (Lower Triangle)', fontsize=16)
plt.xticks(rotation=45, ha='right', fontsize=16)
plt.yticks(fontsize=16)

# Save the heatmap
plt.savefig("path/Tcombinecor_lower_triangle.png", bbox_inches='tight', dpi=300)
plt.savefig("path/Tcombinecor_lower_triangle.pdf", bbox_inches='tight', dpi=300)




